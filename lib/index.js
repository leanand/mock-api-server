// Generated by CoffeeScript 1.10.0
'use strict';
var Dsl, MockApi, child_process, httpSync,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

child_process = require('child_process');

Dsl = require('./dsl');

httpSync = require('http-sync-4');

MockApi = (function() {
  function MockApi(options) {
    this.options = options;
    this._addResponseSpecification = bind(this._addResponseSpecification, this);
  }

  MockApi.prototype.start = function(done) {
    var args;
    args = ['--port', this.options.port];
    if (!this.options.logToConsole) {
      args.push('--no-log-to-console');
    }
    if (this.options.logToFile) {
      args.push('--log-to-file');
      args.push(this.options.logToFile);
    }
    child_process.spawn(__dirname + "/../bin/mock-api-server", args);
    return setTimeout(done, 500);
  };

  MockApi.prototype.stop = function() {
    return this._sendCommand('stop');
  };

  MockApi.prototype.reset = function() {
    return this._sendCommand('reset');
  };

  MockApi.prototype.respondTo = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return new Dsl(this._addResponseSpecification, args);
  };

  MockApi.prototype._addResponseSpecification = function(spec) {
    var request;
    request = httpSync.request({
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      port: this.options.port,
      body: JSON.stringify(spec),
      path: '/mock-api/add-response'
    });
    return request.end();
  };

  MockApi.prototype._sendCommand = function(name) {
    var request;
    request = httpSync.request({
      method: 'GET',
      port: this.options.port,
      path: "/mock-api/" + name
    });
    return request.end();
  };

  return MockApi;

})();

module.exports = MockApi;
